continue
isRegistered
continue
current_user.event_attendings.pluck(:event_id).include?"4"
current_user.event_attendings.pluck(:event_id).include?4
current_user.event_attendings.pluck(:event_id)
params[:id]
isRegistered
continue
current_user.subscribeTo(params[:id])
params[:id]
params
current_user
continue
current_user.event_attendings
current_user
exit
xit
continue
SessionsHelper.instance_methods.include?(:current_user)
SessionsHelper.methods.include?(:current_user)
SessionsHelper.methods.include?(:current_user))
SessionsHelper.methods.include?(:respond_to?)
SessionsHelper.methods.include?(:current_user)
SessionsHelper.methods
SessionsHelper.current_user
current_user
(current_user.event_attendings === event.id)
(current_user.event_attendings === event.id)?
if (current_user.event_attendings === event.id) "Clicked" else "Going?" end
continue
self.events.where('date <= ?', DateTime.now)
self.events.where('date < ?', DateTime.now)
self.events.where('date > ?', DateTime.now)
self.events.where(date: DateTime.now)
self.events.where(date: >= DateTime.now)
self.events.where(date: 1.week.ago..DateTime.now)
DateTime.now
Date.today
self.events.where(date: 1.week.ago..Date.today+1)
self.events.where(date: 1.week.ago..Date.today)
self.events.where(:location => "Edmonton", (Time.now..Time.now+4).cover?(Time.now))
self.events.where(:location => "Edmonton", (Time.now..Time.now+4).cover?(TIme.now))
self.events.where(:location => "Edmonton", :date :between ((DateTime.today-1)..DateTime.today)
self.events.where(:location => "Edmonton", :date between ((DateTime.today-1)..DateTime.today)
self.events.where(:location => "Edmonton", :date => ((DateTime.today-1)..DateTime.today)
self.events.where(:location => "Edmonton", :date => (DateTime.today-1..DateTime.today)
self.events.where(:location => "Edmonton", :date => DateTime.today)
self.events.where(:location => "Edmonton", :date => Date.today)
self.events.where(:location => "Edmonton", :date => Date.Today)
self.events.where(:location => "Edmonton")
self.events.where(:location => "Edmontodn")
self.events.where(:location => "Edmonton")
self.events.first.where(Date.parse(:date) >= Date.today)
self.events.first.date
self.events
self.events.date
self.events.where(Date.parse(:date) >= Date.today)
self.events.where(Date.parse(:date) >= Date.today))
self.events.where(:date >= DateTime.now)
self.events.where(:date == DateTime.now)
self.events.where(:date == dateTime.now)
self.events.where(date == dateTime.now)
self.events.date
:date
self.events.where(:date >= DateTime.now)
self.events
self
continue
exit
current_user
@user
params
exit
params[:session][:id]
params[:session]
params
User
